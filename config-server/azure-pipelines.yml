trigger:
- master

variables:
  servConResGroup: 'marios_resource_group1_conn'
  servConAcr: 'marios_acr1_conn'
  keyVaultName: 'azure-marios-keyvault'
  buildConfiguration: 'Release'
  location: 'North Europe'
  acrHostName: <acr url>
  imageName: 'configserverim'
  imageTag: $(Build.BuildId)

pool: Default
  #vmImage: ubuntu-latest

stages:
    # build the Web App and deploy it inside the container, it also gets all secrets from keyvault
    - stage: 'Build_Deploy_stage53'
      condition: or( eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual') )
      jobs:
          - job: 'Build_Deploy_job54'
            steps:
                # load secrets from keyvault
                - task: AzureKeyVault@2
                  inputs:
                    azureSubscription: "$(servConResGroup)"
                    KeyVaultName: "$(keyVaultName)"
                    SecretsFilter: '*'
                    RunAsPreJob: false
                # login in ACR
                - task: Docker@2
                  displayName: Login to Azure Container Registry aka ACR - tag56
                  inputs:
                    command: login
                    containerRegistry: '$(servConAcr)'
                # build docker image and push it to ACR
                - task: Docker@2
                  displayName: Build docker image and Push it to container - tag57
                  inputs:
                    command: buildAndPush
                    repository: '$(imageName)'                    
                    tags: |
                      $(imageTag)
                # deploy image on Azure Web App
                - task: AzureWebAppContainer@1
                  displayName: 'Azure Web App on Container Deploy -tag58'
                  inputs:
                    azureSubscription: "$(servConResGroup)"
                    appName: <web app name>
                    imageName: $(acrHostName)/$(imageName):$(imageTag)
                    appSettings: '-WEBSITES_PORT 80 -WEBSITES_PORTS 80 -CLOUD_CONFIG_PASSWORD "$(cloud-config-pass2)" -PERSONAL_ACCESS_TOKEN "$(personal-access-token1)" -ENCRYPT_KEY "$(encrypt-key1)"'
